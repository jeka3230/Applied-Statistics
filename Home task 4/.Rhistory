install.packages("swirl")
library(swirl)
library("swirl")
fit.ets <- ets(tSeries, lambda=LambdaOpt)
print(fit.ets)
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
data <- read.csv("monthly-wage.csv", sep=",", stringsAsFactors=F)
data <- head(data, -1)
names(data)[1] <- "Date"
names(data)[2] <- "Value"
xname <- "Average nominal wage, rub/month"
data$Value <- as.numeric(data$Value)
data$Date <- as.Date(as.yearmon(data$Date, format="%Y-%m"))
tSeries <- ts(data = data$Value, start = as.numeric(c(format(data$Date[1], "%Y"), format(data$Date[1], "%m"))), freq = 12)
plot(tSeries, type="l", ylab=xname, col="red")
grid()
trainSeries <- window(tSeries, end=c(2013,01))
testSeries  <- window(tSeries, start=c(2013,2))
D <- 36
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
data = read.csv("lenex-corporation-shipment-of-ra.csv", header = T, stringsAsFactors = F)
names(data)[1] <- "Date"
names(data)[2] <- "Value"
xname <- "Lenex corporation: shipment of radios"
data$Value <- as.numeric(data$Value)
data$Date <- as.Date(as.yearmon(data$Date, format="%Y-%m"))
tSeries <- ts(data = data$Value, start = as.numeric(c(format(data$Date[1], "%Y"), format(data$Date[1], "%m"))), freq = 12)
plot(tSeries, type="l", ylab=xname, col="red")
grid()
trainSeries <- window(tSeries, end=c(1977,01))
testSeries  <- window(tSeries, start=c(1977,2))
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
data = read.csv("lenex-corporation-shipment-of-ra.csv", header = T, stringsAsFactors = F)
names(data)[1] <- "Date"
names(data)[2] <- "Value"
xname <- "Lenex corporation: shipment of radios"
data$Value <- as.numeric(data$Value)
data$Date <- as.Date(as.yearmon(data$Date, format="%Y-%m"))
tSeries <- ts(data = data$Value, start = as.numeric(c(format(data$Date[1], "%Y"), format(data$Date[1], "%m"))), freq = 12)
plot(tSeries, type="l", ylab=xname, col="red")
grid()
trainSeries <- window(tSeries, end=c(1977,01))
testSeries  <- window(tSeries, start=c(1977,2))
tseries
tSeries
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
data = read.csv("lenex-corporation-shipment-of-ra.csv", header = T, stringsAsFactors = F)
names(data)[1] <- "Date"
names(data)[2] <- "Value"
xname <- "Lenex corporation: shipment of radios"
data$Value <- as.numeric(data$Value)
data$Date <- as.Date(as.yearmon(data$Date, format="%Y-%m"))
tSeries <- ts(data = data$Value, start = as.numeric(c(format(data$Date[1], "%Y"), format(data$Date[1], "%m"))), freq = 12)
plot(tSeries, type="l", ylab=xname, col="red")
grid()
knitr::opts_chunk$set(echo = TRUE)
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
data = read.csv("lenex-corporation-shipment-of-ra.csv", header = T, stringsAsFactors = F)
names(data)[1] <- "Date"
names(data)[2] <- "Value"
xname <- "Lenex corporation: shipment of radios"
data$Value <- as.numeric(data$Value)
data$Date <- as.Date(as.yearmon(data$Date, format="%Y-%m"))
tSeries <- ts(data = data$Value, start = as.numeric(c(format(data$Date[1], "%Y"), format(data$Date[1], "%m"))), freq = 12)
plot(tSeries, type="l", ylab=xname, col="red")
grid()
getwd()
setwd("Rprojects/прикладная статистика/Home task 4/")
library(forecast)
library(tseries)
library(lmtest)
library(Hmisc)
data = read.csv("lenex-corporation-shipment-of-ra.csv", header = T, stringsAsFactors = F)
names(data)[1] <- "Date"
names(data)[2] <- "Value"
xname <- "Lenex corporation: shipment of radios"
data$Value <- as.numeric(data$Value)
data$Date <- as.Date(as.yearmon(data$Date, format="%Y-%m"))
tSeries <- ts(data = data$Value, start = as.numeric(c(format(data$Date[1], "%Y"), format(data$Date[1], "%m"))), freq = 12)
plot(tSeries, type="l", ylab=xname, col="red")
grid()
trainSeries <- window(tSeries, end=c(1977,01))
testSeries  <- window(tSeries, start=c(1977,2))
plot(tSeries / monthDays(as.Date(time(tSeries))), type="l", ylab=xname, col="red")
grid()
plot(stl(tSeries, s.window="periodic"))
par(mfrow=c(2,1))
plot(tSeries, ylab="Original series", xlab="", col="red")
grid()
LambdaOpt <- BoxCox.lambda(tSeries)
plot(BoxCox(tSeries, LambdaOpt), ylab="Transformed series", xlab="", col="red")
title(main=toString(round(LambdaOpt, 3)))
grid()
fit.ets <- ets(tSeries)
print(fit.ets)
fitShort <- ets(trainSeries, model="MNM", damped=T)
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Year")
lines(tSeries, col="red")
fitShort <- ets(trainSeries, model="MNM")
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Year")
lines(tSeries, col="red")
fitShort <- ets(trainSeries, model="MNM")
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Year")
lines(tSeries, col="red")
fit.ets <- ets(tSeries, lambda = LambdaOpt)
print(fit.ets)
fitShort <- ets(trainSeries, model="ANA")
fc       <- forecast(fitShort, h=D)
accuracy(fc, testSeries)
plot(forecast(fitShort, h=D), ylab=xname, xlab="Year")
lines(tSeries, col="red")
res.ets <- (tSeries - fitted(fit.ets))[-c(1:13)]
plot(res, res.ets,
xlab="Residuals, best ARIMA",
ylab="Residuals, best ETS",
xlim=c(min(c(res, res.ets), na.rm=T), max(c(res, res.ets), na.rm=T)),
ylim=c(min(c(res, res.ets), na.rm=T), max(c(res, res.ets), na.rm=T)))
lines(c(min(c(res, res.ets), na.rm=T), max(c(res, res.ets), na.rm=T)), c(min(c(res, res.ets), na.rm=T), max(c(res, res.ets), na.rm=T)), col="red")
dm.test(res, res.ets)
dm.test(res, res.ets, alternative = "less")
res      <- (tSeries - fitted(fit))[-c(1:13)]
res.auto <- (tSeries - fitted(fit.auto))[-c(1:13)]
plot(res, res.auto, xlim=c(min(res, res.auto), max(res, res.auto)), ylim=c(min(res, res.auto), max(res, res.auto)),
xlab = "Residuals of manually found model", ylab="Residuals of auto.arima model")
grid()
lines(c(min(res, res.auto), max(res, res.auto))*2, c(min(res, res.auto), max(res, res.auto))*2, col="red")
dm.test(res, res.auto)
fit.ets$fitted
res.ets
y<-tSeries
n<- length(y)
m<- ets(y)
k<- length(m$par)
rss <- sum(m$residuals^2)
m1<- ets(y[1:24])
k1<- length(m1$par)
rss1 <- sum(m1$residuals^2)
m2<- ets(y[25:n])
k2<- (m2$aic + 2*m2$loglik)/2
rss2 <- sum(m2$residuals^2)
f <- ((rss-rss1-rss2)/(k1+k2-k)) / ((rss1-rss2)/(n-k1-k2))
pf(f, k1+k2-k, n-k1-k2)
pf
y<-BoxCox(tSeries, LambdaOpt)
n<- length(y)
m<- ets(y)
k<- length(m$par)
rss <- sum(m$residuals^2)
m1<- ets(y[1:24])
k1<- length(m1$par)
rss1 <- sum(m1$residuals^2)
m2<- ets(y[25:n])
k2<- (m2$aic + 2*m2$loglik)/2
rss2 <- sum(m2$residuals^2)
f <- ((rss-rss1-rss2)/(k1+k2-k)) / ((rss1-rss2)/(n-k1-k2))
pf(f, k1+k2-k, n-k1-k2)
rss
rss1
rss2
k1+k2
-=k
k
f
m1
length(tSeries)
y<-BoxCox(tSeries, LambdaOpt)
n<- length(y)
m<- ets(y)
k<- length(m$par)
rss <- sum(m$residuals^2)
m1<- ets(y[1:50])
k1<- length(m1$par)
rss1 <- sum(m1$residuals^2)
m2<- ets(y[51:n])
k2<- (m2$aic + 2*m2$loglik)/2
rss2 <- sum(m2$residuals^2)
f <- ((rss-rss1-rss2)/(k1+k2-k)) / ((rss1-rss2)/(n-k1-k2))
pf(f, k1+k2-k, n-k1-k2)
pf(f, k1+k2-k, n-k1-k2)
f
y<-BoxCox(tSeries, LambdaOpt)
n<- length(y)
m<- ets(y)
k<- length(m$par)
rss <- sum(m$residuals^2)
m1<- ets(y[1:100])
k1<- length(m1$par)
rss1 <- sum(m1$residuals^2)
m2<- ets(y[101:n])
k2<- (m2$aic + 2*m2$loglik)/2
rss2 <- sum(m2$residuals^2)
f <- ((rss-rss1-rss2)/(k1+k2-k)) / ((rss1-rss2)/(n-k1-k2))
pf(f, k1+k2-k, n-k1-k2)
f
y<-BoxCox(tSeries, LambdaOpt)
n<- length(y)
m<- ets(y)
k<- length(m$par)
rss <- sum(m$residuals^2)
m1<- ets(y[1:120])
k1<- length(m1$par)
rss1 <- sum(m1$residuals^2)
m2<- ets(y[121:n])
k2<- (m2$aic + 2*m2$loglik)/2
rss2 <- sum(m2$residuals^2)
f <- ((rss-rss1-rss2)/(k1+k2-k)) / ((rss1-rss2)/(n-k1-k2))
pf(f, k1+k2-k, n-k1-k2)
f
k1 + k2 - k
n-k1-k2
y<-BoxCox(tSeries, LambdaOpt)
n<- length(y)
m<- ets(y)
k<- length(m$par)
rss <- sum(m$residuals^2)
m1<- ets(y[1:109])
k1<- length(m1$par)
rss1 <- sum(m1$residuals^2)
m2<- ets(y[110:n])
k2<- (m2$aic + 2*m2$loglik)/2
rss2 <- sum(m2$residuals^2)
f <- ((rss-rss1-rss2)/(k1+k2-k)) / ((rss1-rss2)/(n-k1-k2))
pf(f, k1+k2-k, n-k1-k2)
n-k1-k2
k1+k2-k
